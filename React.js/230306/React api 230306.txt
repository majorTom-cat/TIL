14장
14.1.2 Promise

Promise는 콜백 지옥 같은 코드가 형성되지 않게 하는 방안으로 ES6에 도입된 기능
여러 작업을 연달아 처리한다고 해서 함수를 여러 번 감싸는 것이 아니라
.then을 사용하여 그다음 작업을 설정하기 때문에 콜백 지옥이 형성되지 않는다

async/await는 Promise를 더욱 쉽게 사용할 수 있도록 해 주는 ES2017(ES8) 문법
이 문법을 사용하려면 함수의 앞부분에 async 키워드를 추가하고,
해당 함수 내부에서 Promise의 앞부분에 await 키워드를 사용한다.
이렇게 하면 Promise가 끝날 때까지 기다리고, 결과 값을 특정 변수에 담을 수 있다.

axios는 내부적으로 promise를 이용하도록 설계됨
resolve, reject 둘 다 콜백함수
성공시 호출, 혹은 실패시 호출되는 함수들
Promise 함수가 정상적으로 수행이 되었을때 then이 수행됨
resolve(result) 값을 then 블럭이 파라미터로 전달받음
async/await 짝을 이룸
then과 async둘 중 성능의 차이는없음

axios 라이브러리
- 브라우저, Node.js를 위한 Promise API를 활용하는 HTTP 비동기 통신 라이브러리
- Ajax와 비슷한 방식으로 동작

axios는 현재 가장 많이 사용되고 있는 자바스크립트 HTTP 클라이언트이다.
이 라이브러리의 특징은 HTTP 요청을 Promise 기반으로 처리한다는 점

axios 문법
예시)
axios({
  url: 'https://naver.com/list/', // 통신할 웹문서
  method: 'get', // 통신할 방식. get이 기본값
  data: { // 인자로 보낼 데이터
    foo: 'dairy'
  },
  responseType: 'json', // default
});

axios 단축메서드
- axios.get(url[, config])

예시1)
axios.get('/user?ID=12345')
  .then(function (response) { // response에 반환값을 받고 함수 수행
    // 성공했을 때
    console.log(response);
  })
  .catch(function (error) {
    // 에러가 났을 때
    console.log(error);
  })
  .finally(function () {
    // 항상 실행되는 함수
  });

예시2)
axios.get('/user', {
    params: {
      ID=12345
    }
  })
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  })
  .finally(function () {
    // always executed
  });

예시3) async/await 를 쓰고 싶다면
async function getUser() {
  try {
    const response = await axios.get('/user?ID=12345');
    console.log(response);
  } catch (error) {
    console.error(error);
  }
}

- axios.post(url[, data[, config]]) // body에 담아서 보낼때 data 구조를 따로 명시해줘야함. 대괄호는 생략가능한 부분

예시1)
axios.post('/user', {
		firstName: 'Fred',
		lastName: 'Flintstone'
  })
  .then(function (response) {
    // response
    console.log(response);
  })
  .catch(function (error) {
    // 에러가 났을 때
    console.log(error);
  })
  .finally(function () {
    // 항상 실행되는 함수
  });


14.5 데이터 연동하기

NewsList 컴포넌트에서 이전에 연습 삼아 사용했던 API를 호출해 보겠다.
컴포넌트가 화면에 보이는 시점에 API를 요청해 볼 텐데
이때 useEffect를 사용하여 컴포넌트가 처음 렌더링되는 시점에 API를 요청하면 된다.
여기서 주의할 점은 useEffect에 등록하는 함수에 async를 붙이면 안 된다는 것이다.
useEffect에서 반환해야 하는 값은 뒷정리 함수이기 때문입니다. 따라서 useEffect 내부에서 async/await를 사용하고 싶다면,
함수 내부에 async 키워드가 붙은 또 다른 함수를 만들어서 사용해 주어야 한다.

map 함수를 사용하기 전에 꼭 !articles를 조회하여 해당 값이 현재 null이 아닌지 검사해야 한다.
이 작업을 하지 않으면, 아직 데이터가 없을 때 null에는 map 함수가 없기 때문에 렌더링 과정에서 오류가 발생한다.
그래서 애플리케이션이 제대로 나타나지 않고 흰 페이지만 보이게 한다.
// 아직 articles 값이 설정되지 않았을 때
   if (!articles) {
     return null;
   }

리퍼러(referrer)는 웹 브라우저로 월드 와이드 웹을 서핑할 때, 하이퍼링크를 통해서 각각의 사이트로 방문시 남는 흔적을 말한다
예를 들어 A라는 웹 페이지에 B 사이트로 이동하는 하이퍼링크가 존재한다고 하자.
이 때 웹 사이트 이용자가 이 하이퍼링크를 클릭하게 되면 웹 브라우저에서 B 사이트로 참조 주소(리퍼러)를 전송하게 된다.
B 사이트의 관리자는 이 전송된 리퍼러를 보고 방문객이 A 사이트를 통해 자신의 사이트에 방문한 사실을 알 수 있다.
웹 사이트의 서버 관리자가 사이트 방문객이 어떤 경로로 자신의 사이트에 방문했는지 알아볼 때 유용하게 사용된다.
하지만, 리퍼러는 사용자가 언제든지 조작이 가능하기 때문에 주의해야 한다.


14.7.2 Newspage 생성
Newspage.js
현재 선택된 category 값을 URL 파라미터를 통해 사용할 것이므로
Categories 컴포넌트에서 현재 선택된 카테고리 값을 알려 줄 필요도 없고,
onSelect 함수를 따로 전달해 줄 필요도 없다.

14.7.3 Categories에서 NavLink 사용하기
이제 Categories에서 기존의 onSelect 함수를 호출하여 카테고리를 선택하고,
선택된 카테고리에 다른 스타일을 주는 기능을 NavLink로 대체해 보겠다.

Categories.js
NavLink로 만들어진 Category 컴포넌트에 to 값은 "/카테고리이름"으로 설정해 주었다.
그리고 카테고리 중에서 전체보기의 경우는 예외적으로 "/all" 대신에 "/"로 설정했다.
to 값이 "/"를 가리키고 있을 때는 exact 값을 true로 해 주어야 한다.
이 값을 설정하지 않으면, 다른 카테고리가 선택되었을 때도 전체보기 링크에 active 스타일이 적용되는 오류가 발생.

정리
리액트 컴포넌트에서 API를 연동하여 개발할 때 절대 잊지 말아야 할 유의 사항은
useEffect에 등록하는 함수는 async로 작성하면 안 된다는 점.
그 대신 함수 내부에 async 함수를 따로 만들어 주어야 한다.
===================================

developers.naver.com

===================================

동일 출처 정책 (Same-Origin Policy)
- 두 URL의 프로토콜(protocol), 호스트(host), 포트(port)가 모두 같은 경우

교차 출처 자원 공유 (CORS, Cross Origin Resource Sharing)
- 하나의 서버에서 웹 페이지와 데이터를 모두 가져올 때는 문제가 없다.
- 프론트엔드 서비스와 백엔드 서비스가 나뉘면서 브라우저(browser)가 프론트엔드 서비스로부터 웹 페이지, 스타일,
  스크립트 문서를 받고, 데이터나 리소스는 백엔드 서비스로부터 직접 받으려고 할 때 동일 출처 정책을 위반한다.

해결 방법중 하나는
package.json에 "proxy": "https://newsapi.org", 추가

내가 요청을 할때 주소가 로컬호스트3000. 이 주소를 https://newsapi.org 주소인것처럼 위장해서 요청하는것
그래서 NewsList.js 에서
const response = await axios.get(
          `https://newsapi.org/v2/top-headlines?country=kr${query}&apiKey=f400147049fc42fdabb85e4358a386e9`,
        );
주소를
`/v2/top-headlines?country=kr${query}&apiKey=f400147049fc42fdabb85e4358a386e9`
이렇게만 해줘도 됨(프록시 설정시)

프론트는 리액트. Node.js
백은 스프링부트. 아파치 톰캣
서버가 다름. 100% CORS 오류 발생함

유선랜

사진
따로 webpack-dev-server에 대해서 직접적으로 설정을 해줄 수도 있습니다만,
웬만하면 건들지 않는 것이 좋으니, 강사님 말씀대로 주소를 직접 사용하는 것이 좋을 것 같습니다

14.7 교재는 예전 내용


Client ID : tvtmXccfEfwQZo8GPTZR
Client Secret : dsjjHsN93b

yarn add axios

package.json
"proxy": "https://openapi.naver.com",

/v1/search/blog.json

유선랜에 경우 지정된 IP를 사용하기에, 별도의 프록시 설정이 안 먹히는 경우가 존재합니다.
이런 경우엔 보통 프록시 미들웨어를 사용하여 처리를 해줍니다.
수업에서 사용되는 프로젝트 예제는 CRA (Create react-app)을 기반으로 진행되기 때문에,
서버 설정이 자동으로 되어있는 상태입니다. 프로젝트의 요구에 맞게 dev-server를 직접 구축하고 싶다면
webpack과 관련된 자료를 알아보시면 됩니다! ( 물론 신입의 요구를 넘어서는 기술스택입니다 )
https://juni-official.tistory.com/248

난 프록시 설정을 주면 yarn start가 동작하지 않아서 다음 글을 참고했다.
https://biio-studying.tistory.com/238
https://velog.io/@dkdlel102/React-CORS-%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0
setupProxy.js 를 src에 만들고 target을 api 주소로 설정했다.
또한 package.json에  "allowedHosts": "all", 를 추가했다.
"private": true, 를 false 로 바꿔주었지만 영향이 있는지는 모르겠다.

랩탑의 경우 package.json은 수정하지 않았는데 잘 동작이 되었다.
물론 데스크탑처럼 프록시 값을 입력하지 않고 setupProxy 파일로 프록시 미들웨어 설정을 따로 주었다.


const onClick = () => {
    axios
      .get("/api", {
        params: {
          query: "react", //이미지 검색 텍스트
          start: 1, //검색 시작 위치
          display: 5, //가져올 이미지 갯수
          sort: "sim", //정렬 유형 (sim:유사도)
        },
        headers: {
          // 이게 없으면 naver에서 요청 거부
          "X-Naver-Client-Id": NAVER_CLIENT_ID,
          "X-Naver-Client-Secret": NAVER_CLIENT_SECRET,
        },
      })
      .then((response) => {
        setItems(response.data.items);
      })
      .catch((e) => {
        console.log("ERROR:" + e);
      });
  };
잘 익혀둘것. React 에서 자주 사용하게될것임
