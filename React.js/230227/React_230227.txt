3.3 props 리뷰
parameter를 전달할땐 속성을 이용한다
return <MyComponent name="React" name2="리액트" />;
모든 속성을 객체 형태로 전달받는다
const MyComponent = (props) =>{...}

전달되는 props 없으면 디폴트값 설정도 가능

리액트 서버를 실행할땐 node.js를 이용해햐함

package.json에 있는 script에 start: ....
yarn start를 하면 저 start: 에 있는게 실행되는것

localhost:3000 이 가리키는것은 index.html
디폴트 문서는 index로 설정되어있음
public에 있는 <div id="root"></div>
이 문서를 src에 있는 js 소스코드.

3.3.4 children

비구조화 할당
props는
객체형태로 되어있음
{name: "React",
name2: "Hong---",
children: "리액티티"}

const MyComponent = (props) =>
props 자리에 그냥 { name, name2, children } 쓰면 더 간단하지 않을까

타입을 강제할 수 있음
MyComponent.propTypes = {
  name: PropTypes.string
  favoriteNumber: PropTypes.number.isRequired // 필수 입력하게 만듬
};

숫자전달은 {3} 이런식으로.

3.3.7 class 방식은 반드시 Component를 상속받아야함

자바에서 쓰는 static과 비슷하다고 생각하면 됨

3.4 state 중요함
state를 만들어서 props형태로 전달하면 값을 변경할 수 있음
하나는 클래스형 컴포넌트가 지니고 있는 state이고,
다른 하나는 함수형 컴포넌트에서 useState(hook)라는 함수를 통해 사용하는 state

index.html <- index.js <- App.js <- Counter.js

상태에 대한 초기화는 생성자를 통해서. 값의 변경은 setState로. 반드시 state와 짝을 이룬다
constructor 메서드를 선언하지 않고도 state 초깃값을 설정할 수 있다. 이 방식 많이 사용

3.4.1.3
객체 형태인 { number: number + 1 } 대신 함수형태로 문제 해결
props는 부모로부터 받은 상태 정보값. 필요없으면 빼도 됨

setState를 사용하여 값을 업데이트하고 난 다음에 특정 작업을 하고 싶을 때는
setState의 두 번째 파라미터로 콜백(callback) 함수를 등록하여 작업을 처리할 수 있다.

컴포넌트 만들때에도 선언적 함수로 만들수도, 화살표 함수로 만들수도 있다
useState 함수가 리턴하는 값은 배열구조임
[상태값, 함수]
이 함수는 class 와 비교하면 setState함수와 같음
 const [message, setMessage] = useState("");
useState("") 는 배열 형태로 두개의 값 전달.
message에 "",(상태값)
setMessage 에 상태를 변경하는 함수 전달. 세터(Setter) 함수 라고 부름
useState 함수의 인자에는 상태의 초깃값을 넣어 준다. (message 초기값)

강사 개인적으로 화살표 함수로 선언보다 선언적 함수로 선언이 구조를 파악하기 쉽지 않을까

클래스 기반
state - 객체
setState()

함수기반
useState() => 반환갑 구조 [상태값, 상태함수]
상태값 : 숫자, 문자열, 객체, 배열 다 가능

함수기반으로 사용하도록 권장
class 기반은 상태값의 라이프사이클을 정확히 다룰 수 있는 장점은 있음.

클래스형 컴포넌트든 함수형 컴포넌트든 state를 사용할 때는 주의해야 할 사항이 있다.
state 값을 바꾸어야 할 때는 setState 혹은 useState를 통해 전달받은 세터 함수를
사용해야 한다.
배열이나 객체를 업데이트해야 할 때는 어떻게 해야 할까
이런 상황에서는 배열이나 객체 사본을 만들고 그 사본에 값을 업데이트한 후,
그 사본의 상태를 setState 혹은 세터 함수를 통해 업데이트한다

사본 객체 만들기
... 연산자(spread 연산자)
객체에 대한 사본을 만들 때는 spread 연산자라 불리는 ...을 사용하여 처리하고,
배열에 대한 사본을 만들 때는 배열의 내장 함수들을 활용한다.

4.1.1 이벤트를 사용할 때 주의사항
1. 이벤트 이름은 카멜 표기법으로 작성
HTML의 onclick은 onClick, onkeyup은 onKeyUp

2. 이벤트에 실행할 자바스크립트 코드를 전달하는 것이 아니라, 함수 형태의 값을 전달한다

HTML에서 이벤트를 설정할 때는 큰따옴표 안에 실행할 코드를 넣었지만,
리액트에서는 함수 형태의 객체를 전달한다.
앞서 버튼 예제에서도 화살표 함수 문법으로 함수를 만들어 전달했듯이
이렇게 바로 만들어서 전달해도 되고,
렌더링 부분 외부에 미리 만들어서 전달해도 된다.

3. DOM 요소에만 이벤트를 설정할 수 있다

즉 div, button, input, form, span 등의 DOM 요소에는 이벤트를 설정할 수 있지만,
우리가 직접 만든 컴포넌트에는 이벤트를 자체적으로 설정할 수 없다.
예를 들어 다음과 같이 MyComponent에 onClick 값을 설정한다면 MyComponent를 클릭할 때
doSomething 함수를 실행하는 것이 아니라,
그냥 이름이 onClick인 props를 MyComponent에게 전달해 줄 뿐이다.
<MyComponent onClick={doSomething}/>

따라서 컴포넌트에 자체적으로 이벤트를 설정할 수는 없다.
하지만 전달받은 props를 컴포넌트 내부의 DOM 이벤트로 설정할 수는 있다.

<div onClick={this.props.onClick}>
    { /* (...) */ }
</div>


이벤트가 발생하면 이벤트 객체를 파라미터로 전달 받아서 onChange 호출
e : event 객체
target: input 어디에서 이벤트가 발생했는지 target으로 알 수 있음
하위에 value
e.target 은 이벤트 발생한 객체
e.target.value 는 입력된 값.

어떤 이벤트가 발생하면 자바스크립트에서 event 객체가 만들어짐. SyntheticEvent가 래핑함
SyntheticEvent 및 네이티브 이벤트와 달리 이벤트가 끝나고 나면 이벤트가 초기화되므로 정보를 참조할 수 없다
동기적으로 이벤트 객체를 참조할 일이 있다면 e.persist() 함수를 호출

e.target.value

4.2.3.1
constructor(props) {
    super(props);
    this.handleChange = this.handleChange.bind(this);
    this.handleClick = this.handleClick.bind(this);
  }
현재 객체와 메소도를 연결(bind) 시켜줌. 맵핑 시켜줌
함수가 호출될 때 this는 호출부에 따라 결정되므로,
클래스의 임의 메서드가 특정 HTML 요소의 이벤트로 등록되는 과정에서 메서드와 this의 관계가 끊어져 버린다.
이 때문에 임의 메서드가 이벤트로 등록되어도 this를 컴포넌트 자신으로 제대로 가리키기 위해서는
메서드를 this와 바인딩(binding)하는 작업이 필요하다.
만약 바인딩하지 않는 경우라면 this가 undefined를 가리키게 된다.
현재 constructor 함수에서 함수를 바인딩하는 작업이 이루어지고 있다.

메소드를 추가하면 계속해서 생성자를 update해야 하므로 번거로운 작업임
화살표 함수로 정의해 생성자로 연결작업 없이 쓰자
클래스 기반 함수일경우 화살표 함수를 많이 쓰게될것

가장 편한 마지막 방법을 위주로 기억

4.2.4
e.target.name = e.target.value

클래스기반에서 입력에 대해 여러개 처리할떄.
대 괄호로 묶어줄것. 키 처럼 사용해려면.
handleChange = e => {
    this.setState({
      [e.target.name]: e.target.value
    });
};

객체 안에서 key를 [ ]로 감싸면 그 안에 넣은 레퍼런스가 가리키는 실제 값이
key 값으로 사용된다.
예를 들어 다음과 같은 객체를 만들면

const name = 'variantKey';
const object = {
[name]: 'value'
};
결과는 다음과 같다.

{
'variantKey': 'value'
}

4.3
EventPractice3.js

const [form, setForm] = useState({
    username: '',
    message: ''
  }); // useState의 두 번째 파라미터는 써있지 않지만 setForm에 해당하는게 자동으로 들어있다

const onChange = (e) => {
    // 객체를 복제하여 속성값을 변경하고 변경된 데이터로 수정
    const nextForm = {
      ...form, // 기존의 form 내용을 이 자리에 복사한 뒤
      [e.target.name]: e.target.value, // 원하는 값을 덮어 씌우기
    };
    setForm(nextForm);
  };
익숙해져야할 문법

onKeyPress 는 duplicate 이므로 onKeyDown 또는 onKeyUp 상황에 따라 사용

기타 수업 자료
Q: super(props)를 하는 이유?
A: 리액트에서 클래스를 사용할 때 ( 자바도 동일 ) super()를 선언해주는데,
이는 부모클래스를 참조하여 this 예약어를 사용 할 수 있게 해줍니다.
객체지향언어인 자바에선 중요한 내용이니, 시간날 때 보시면 좋습니다
리액트 super() :
https://min9nim.github.io/2018/12/super-props/
java super():
http://www.tcpschool.com/java/java_inheritance_super

https://www.youtube.com/watch?v=0B6D_8wX5yg
